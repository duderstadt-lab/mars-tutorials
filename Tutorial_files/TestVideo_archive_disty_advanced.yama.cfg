{
  "Window" : {
    "x" : 0,
    "y" : 126,
    "width" : 1304,
    "height" : 656
  },
  "DashboardTab" : {
    "Widgets" : [ {
      "Name" : "ArchivePropertiesWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0
      }
    }, {
      "Name" : "TagFrequencyWidget",
      "Settings" : { }
    }, {
      "Name" : "CategoryChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Python",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String color\n#@OUTPUT String title\n#@OUTPUT String[] xvalues\n#@OUTPUT Double[] yvalues\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\ncolor = \"#add8e6\"\ntitle = \"Category Chart\"\nxlabel = \"Categories\"\nylabel = \"Mean var value\"\nymin = 0.0\nymax = 60.0\n\nxvalues = ['Active','NotActive'] #Name the categories to be displayed\nlist1 = []\nlist2 = []\n\nfor UID in archive.getMoleculeUIDs():\n    if archive.get(UID).hasTag('Active'): #Check if an entry is tagged 'Active'\n        list1.append(archive.get(UID).getParameter('var')) #Make a list of var values\n    else:\n        list2.append(archive.get(UID).getParameter('var')) #Make a list of var values for untagged molecules\nyvalues=[sum(list1)/len(list1),sum(list2)/len(list2)] #Define the yvalues as the means of both lists"
      }
    }, {
      "Name" : "HistogramWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Python",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String title\n#@OUTPUT Integer bins\n#@OUTPUT Double xmin\n#@OUTPUT Double xmax\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\n# Set global outputs\nxlabel = \"Variance\"\nylabel = \"Frequency\"\ntitle = \"Variance\"\nbins = 10\nxmin = 0.0\nxmax = 150.0\nymin = 0.0\nymax = 60.0\n\n# Series 1 Outputs\n#@OUTPUT Double[] series1_values\n#@OUTPUT String series1_strokeColor\n#@OUTPUT Integer series1_strokeWidth\n\nseries1_strokeColor = \"black\"\nseries1_strokeWidth = 2\n\nseries1_values = []\n\nfor molecule in archive.molecules().iterator():\n    series1_values.append(molecule.getParameter(\"var\"))"
      }
    }, {
      "Name" : "XYChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Python",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String title\n#@OUTPUT Double xmin\n#@OUTPUT Double xmax\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\n#@OUTPUT Double[] series1_xvalues\n#@OUTPUT Double[] series1_yvalues\n#@OUTPUT Double[] series1_error\n#@OUTPUT Double[] series2_xvalues\n#@OUTPUT Double[] series2_yvalues\n#@OUTPUT Double[] series2_error\n#@OUTPUT Double[] series3_xvalues\n#@OUTPUT Double[] series3_yvalues\n#@OUTPUT Double[] series3_error\n#@OUTPUT Double[] series4_xvalues\n#@OUTPUT Double[] series4_yvalues\n#@OUTPUT Double[] series4_error\n#@OUTPUT Double[] series5_xvalues\n#@OUTPUT Double[] series5_yvalues\n#@OUTPUT Double[] series5_error\n#@OUTPUT Double[] series6_xvalues\n#@OUTPUT Double[] series6_yvalues\n#@OUTPUT Double[] series6_error\n#@OUTPUT Double[] series7_xvalues\n#@OUTPUT Double[] series7_yvalues\n#@OUTPUT Double[] series7_error\n#@OUTPUT Double[] series8_xvalues\n#@OUTPUT Double[] series8_yvalues\n#@OUTPUT Double[] series8_error\n#@OUTPUT Double[] series9_xvalues\n#@OUTPUT Double[] series9_yvalues\n#@OUTPUT Double[] series9_error\n#@OUTPUT Double[] series10_xvalues\n#@OUTPUT Double[] series10_yvalues\n#@OUTPUT Double[] series10_error\n\n#@OUTPUT String series1_fillColor\n#@OUTPUT String series1_strokeColor\n#@OUTPUT Integer series1_strokeWidth\n#@OUTPUT String series2_fillColor\n#@OUTPUT String series2_strokeColor\n#@OUTPUT Integer series2_strokeWidth\n#@OUTPUT String series3_fillColor\n#@OUTPUT String series3_strokeColor\n#@OUTPUT Integer series3_strokeWidth\n#@OUTPUT String series4_fillColor\n#@OUTPUT String series4_strokeColor\n#@OUTPUT Integer series4_strokeWidth\n#@OUTPUT String series5_fillColor\n#@OUTPUT String series5_strokeColor\n#@OUTPUT Integer series5_strokeWidth\n#@OUTPUT String series6_fillColor\n#@OUTPUT String series6_strokeColor\n#@OUTPUT Integer series6_strokeWidth\n#@OUTPUT String series7_fillColor\n#@OUTPUT String series7_strokeColor\n#@OUTPUT Integer series7_strokeWidth\n#@OUTPUT String series8_fillColor\n#@OUTPUT String series8_strokeColor\n#@OUTPUT Integer series8_strokeWidth\n#@OUTPUT String series9_fillColor\n#@OUTPUT String series9_strokeColor\n#@OUTPUT Integer series9_strokeWidth\n#@OUTPUT String series10_fillColor\n#@OUTPUT String series10_strokeColor\n#@OUTPUT Integer series10_strokeWidth\n\n# Set global outputs\nxlabel = \"Time point (T)\"\nylabel = \"Displacement (Y)\"\ntitle = \"XY Chart\"\nxmin = 0.0\nxmax = 150\nymin = 0.0\nymax = 35\n\n# Make two lists containing the lists of x and y coordinates of the molecules tagged 'Active'\nlist1_x=[]\nlist1_y=[]\n\nfor UID in archive.getMoleculeUIDs():\n    if archive.get(UID).hasTag('Active'):\n        list1_x.append(archive.get(UID).getDataTable().getColumnAsDoubles(\"T\"))\n        list1_y.append(archive.get(UID).getDataTable().getColumnAsDoubles(\"y\"))\n\n# Since all variables have to be explicitly defined, always adjust this part based on the amount of tagged molecules.\nseries1_xvalues = []\nseries1_yvalues = []\nseries2_xvalues = []\nseries2_yvalues = []\nseries3_xvalues = []\nseries3_yvalues = []\nseries4_xvalues = []\nseries4_yvalues = []\nseries5_xvalues = []\nseries5_yvalues = []\nseries6_xvalues = []\nseries6_yvalues = []\nseries7_xvalues = []\nseries7_yvalues = []\nseries8_xvalues = []\nseries8_yvalues = []\nseries9_xvalues = []\nseries9_yvalues = []\nseries10_xvalues = []\nseries10_yvalues = []\n\n# Define the colors of the stroke, the fill, and strokewidth\n[series1_strokeColor,series2_strokeColor,series3_strokeColor,series4_strokeColor,series5_strokeColor, series6_strokeColor,series7_strokeColor,series8_strokeColor,series9_strokeColor,series10_strokeColor]=[\"black\",\"blue\",\"red\",\"green\",\"yellow\",\"cyan\",\"orange\",\"violet\",\"pink\",\"gray\"]\n\n[series1_fillColor,series2_fillColor,series3_fillColor,series4_fillColor,series5_fillColor,series6_fillColor,\nseries7_fillColor,series8_fillColor,series9_fillColor,series10_fillColor]= [series1_strokeColor,series2_strokeColor,series3_strokeColor,series4_strokeColor,series5_strokeColor, series6_strokeColor,series7_strokeColor,series8_strokeColor,series9_strokeColor,series10_strokeColor]\n\n[series1_strokeWidth,series2_strokeWidth,series3_strokeWidth,series4_strokeWidth,series5_strokeWidth,series6_strokeWidth, series7_strokeWidth,series8_strokeWidth,series9_strokeWidth,series10_strokeWidth]=[1,1,1,1,1,1,1,1,1,1]\n\n# Assign the x and y values for each trace\nfor i in list1_x[0]:\n    series1_xvalues.append(i-min(list1_x[0]))\nfor i in list1_y[0]:\n    series1_yvalues.append(i-min(list1_y[0]))\nseries1_error = [0]*len(series1_yvalues)\n\nfor i in list1_x[1]:\n    series2_xvalues.append(i-min(list1_x[1]))\nfor i in list1_y[1]:\n    series2_yvalues.append(i-min(list1_y[1]))\nseries2_error = [0]*len(series2_yvalues)\n\nfor i in list1_x[2]:\n    series3_xvalues.append(i-min(list1_x[2]))\nfor i in list1_y[2]:\n    series3_yvalues.append(i-min(list1_y[2]))\nseries3_error = [0]*len(series3_yvalues)\n\nfor i in list1_x[3]:\n    series4_xvalues.append(i-min(list1_x[3]))\nfor i in list1_y[3]:\n    series4_yvalues.append(i-min(list1_y[3]))\nseries4_error = [0]*len(series4_yvalues)\n\nfor i in list1_x[4]:\n    series5_xvalues.append(i-min(list1_x[4]))\nfor i in list1_y[4]:\n    series5_yvalues.append(i-min(list1_y[4]))\nseries5_error = [0]*len(series5_yvalues)\n\nfor i in list1_x[5]:\n    series6_xvalues.append(i-min(list1_x[5]))\nfor i in list1_y[5]:\n    series6_yvalues.append(i-min(list1_y[5]))\nseries6_error = [0]*len(series6_yvalues)\n\nfor i in list1_x[6]:\n    series7_xvalues.append(i-min(list1_x[6]))\nfor i in list1_y[6]:\n    series7_yvalues.append(i-min(list1_y[6]))\nseries7_error = [0]*len(series7_yvalues)\n\nfor i in list1_x[7]:\n    series8_xvalues.append(i-min(list1_x[7]))\nfor i in list1_y[7]:\n    series8_yvalues.append(i-min(list1_y[7]))\nseries8_error = [0]*len(series8_yvalues)\n\nfor i in list1_x[8]:\n    series9_xvalues.append(i-min(list1_x[8]))\nfor i in list1_y[8]:\n    series9_yvalues.append(i-min(list1_y[8]))\nseries9_error = [0]*len(series9_yvalues)\n\nfor i in list1_x[9]:\n    series10_xvalues.append(i-min(list1_x[9]))\nfor i in list1_y[9]:\n    series10_yvalues.append(i-min(list1_y[9]))\nseries10_error = [0]*len(series10_yvalues)"
      }
    }, {
      "Name" : "BubbleChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Python",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String title\n#@OUTPUT Double xmin\n#@OUTPUT Double xmax\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\n# Set global outputs\nxlabel = \"Track length (T)\"\nylabel = \"Variance\"\ntitle = \"Bubble chart\"\n\nxmin = 0.0\nxmax = 160\nymin = 0.0\nymax = 125\n\n# Series 1 Outputs\n#@OUTPUT Double[] series1_xvalues\n#@OUTPUT Double[] series1_yvalues\n#@OUTPUT Double[] series1_size\n#@OUTPUT String[] series1_label\n#@OUTPUT String[] series1_color\n#@OUTPUT String series1_markerColor\n\nseries1_markerColor = \"lightgreen\"\n\nseries1_xvalues = []\nseries1_yvalues = []\nseries1_size = []\nseries1_color = []\nseries1_label = []\n\nfor molecule in archive.molecules().iterator():\n\tseries1_xvalues.append(molecule.getDataTable().getRowCount()) #Make a list of track lengths\n\tseries1_yvalues.append(molecule.getParameter(\"var\")) #Make a list of var values\n\tseries1_size.append(4.0)\n\tseries1_color.append(\"blue\")\n\tseries1_label.append(molecule.getUID()) #Make a list of the UIDs"
      }
    }, {
      "Name" : "CategoryChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Python",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String color\n#@OUTPUT String title\n#@OUTPUT String[] xvalues\n#@OUTPUT Double[] yvalues\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\ncolor = \"#add8e6\"\ntitle = \"Dist_y vs. Category\"\nxlabel = \"Categories\"\nylabel = \"Mean dist_y value\"\nymin = 0.0\nymax = 30.0\n\nxvalues = ['Active','NotActive'] #Name the categories to be displayed\nlist1 = []\nlist2 = []\n\nfor UID in archive.getMoleculeUIDs():\n    if archive.get(UID).hasTag('Active'): #Check if an entry is tagged 'Active'\n        list1.append(archive.get(UID).getParameter('dist_y'))\n    else:\n        list2.append(archive.get(UID).getParameter('dist_y'))\nyvalues=[sum(list1)/len(list1),sum(list2)/len(list2)]"
      }
    }, {
      "Name" : "BubbleChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Groovy",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String title\n#@OUTPUT Double xmin\n#@OUTPUT Double xmax\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\nxlabel = \"Category (1=tagged, 2=untagged)\"\nylabel = \"Dist_y\"\ntitle = \"Dist_y with respect to category\"\nxmin = 0.0\nxmax = 3.0\nymin = -10\nymax = 35\n\n#@OUTPUT Double[] series1_xvalues\n#@OUTPUT Double[] series1_yvalues\n#@OUTPUT Double[] series1_size\n#@OUTPUT String[] series1_label\n#@OUTPUT String[] series1_color\n#@OUTPUT String series1_markerColor\n#@OUTPUT Double[] series2_xvalues\n#@OUTPUT Double[] series2_yvalues\n#@OUTPUT Double[] series2_size\n#@OUTPUT String[] series2_label\n#@OUTPUT String[] series2_color\n#@OUTPUT String series2_markerColor\n\nseries1_yvalues = []\nseries2_yvalues = []\nlistUID = archive.getMoleculeUIDs()\n\nfor (int i = 0; i<listUID.size();i++){\n  if (archive.get(listUID[i]).hasTag(\"Active\")){\n    series1_yvalues.add(archive.get(listUID[i]).getParameter(\"dist_y\"))\n  } else {\n    series2_yvalues.add(archive.get(listUID[i]).getParameter(\"dist_y\"))\n  }\n}\n\nseries1_markerColor = \"lightgreen\"\nseries1_xvalues = []\nseries1_size = []\nseries1_color = []\nseries1_label = []\nseries2_markerColor = \"pink\"\nseries2_xvalues = []\nseries2_size = []\nseries2_color = []\nseries2_label = []\n\nfor (int i = 0; i<(series1_yvalues.size());i++) {\n  series1_xvalues.add(1)\n  series1_size.add(4.0)\n  series1_color.add(\"blue\")\n  series1_label.add(\"none\")\n}\n\nfor (int i = 0; i<(series2_yvalues.size());i++) {\n  series2_xvalues.add(2)\n  series2_size.add(4.0)\n  series2_color.add(\"red\")\n  series2_label.add(\"none\")\n}"
      }
    }, {
      "Name" : "XYChartWidget",
      "Settings" : {
        "Width" : 270.0,
        "Height" : 270.0,
        "Language" : "Groovy",
        "Script" : "#@ MoleculeArchive archive\n#@OUTPUT String xlabel\n#@OUTPUT String ylabel\n#@OUTPUT String title\n#@OUTPUT Double xmin\n#@OUTPUT Double xmax\n#@OUTPUT Double ymin\n#@OUTPUT Double ymax\n\n#@OUTPUT Double[] series1_xvalues\n#@OUTPUT Double[] series1_yvalues\n#@OUTPUT Double[] series1_error\n#@OUTPUT Double[] series2_xvalues\n#@OUTPUT Double[] series2_yvalues\n#@OUTPUT Double[] series2_error\n#@OUTPUT String series1_fillColor\n#@OUTPUT String series1_strokeColor\n#@OUTPUT Integer series1_strokeWidth\n#@OUTPUT String series2_fillColor\n#@OUTPUT String series2_strokeColor\n#@OUTPUT Integer series2_strokeWidth\n\n//Set global outputs\nxlabel = \"Category (1=Active, 2=Not Active)\"\nylabel = \"Dist_y\"\ntitle = \"Dist_y with respect to Category\"\nxmin = 0.0\nxmax = 3.0\nymin = -10\nymax = 35\n\n//Set plotting settings\nseries1_fillColor = \"blue\"\nseries1_strokeColor = \"blue\"\nseries1_strokeWidth = 2.0\nseries2_fillColor = \"red\"\nseries2_strokeColor = \"red\"\nseries2_strokeWidth = 2.0\n\n//Define the values to be plotted\nseries1_xvalues = [1.0]\nseries2_xvalues = [2.0]\nseries1_error = [archive.getMetadata(0).getParameter(\"disty_sigma_active\")]\nseries2_error = [archive.getMetadata(0).getParameter(\"disty_sigma_unactive\")]\n\nlistUID = []\nseries1_list = []\nseries2_list = []\n\narchive.getMoleculeUIDs().forEach{UID -> listUID.add(UID)}\n\nfor (int i = 0; i<listUID.size();i++){\n  if (archive.get(listUID[i]).hasTag(\"Active\")){\n    series1_list.add(archive.get(listUID[i]).getParameter(\"dist_y\"))\n  } else {\n    series2_list.add(archive.get(listUID[i]).getParameter(\"dist_y\"))\n  }\n}\n\nseries1_yvalues = [series1_list.sum()/series1_list.size()]\nseries2_yvalues = [series2_list.sum()/series2_list.size()]"
      }
    } ]
  },
  "MetadataTab" : {
    "SearchField" : "",
    "MarsMetadataSelectionUID" : "9z1F2oCZta",
    "CenterPane" : {
      "MarsMetadataDashboard" : {
        "Widgets" : [ ]
      }
    }
  },
  "MoleculesTab" : {
    "SearchField" : "",
    "MoleculeSelectionUID" : "tx4Wvm9jqZgbXhzQbDxojr",
    "CenterPane" : {
      "PlotPane" : {
        "NumberSubPlots" : 1,
        "SubPlots" : [ {
          "Title" : "Trace",
          "xAxisName" : "Frame",
          "yAxisName" : "Y Position",
          "Indicators" : "Molecules",
          "PlotSeries" : [ {
            "Track" : true,
            "Type" : "Line",
            "xColumn" : "T",
            "yColumn" : "y",
            "Style" : " ",
            "Color" : "0x000000ff",
            "Stroke" : "1.0",
            "ShowSegments" : true,
            "SegmentsColor" : "0xff0000ff",
            "SegmentsStroke" : "1.0"
          } ]
        } ]
      },
      "MoleculeDashboard" : {
        "Widgets" : [ ]
      }
    }
  },
  "CommentsTab" : { },
  "SettingsTab" : { }
}